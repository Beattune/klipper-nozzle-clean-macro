#############################################################################
#   NOZZLE CLEAN
#############################################################################
# Version: 0.9.7_beta
# ------------------------------------------------------------------------
# !!! DO NOT EDIT THIS FILE !!! - Changes below are unsupported
# ------------------------------------------------------------------------

[gcode_macro CLEAN_NOZZLE]
description: Nozzle cleaning using a brush
gcode:
  # ------------------------------------------------------------------------
  # CONFIGURATION 
  # ------------------------------------------------------------------------
  # Load custom values
  {% set v = printer['gcode_macro _CLEAN_NOZZLE_VARS'] %}
  # Set nozzle height for cleaning at the brush  
  {% set cleaningHeight = v.cleaning_height %}
  # Specifies the axis that will move during wiping (X/Y)
  {% set wipingAxis = v.wiping_axis %}
  # Set maximum Y value of the bed plate edge (not the nozzle maximum if it can go further). N4=229, N4Plus=330, N4Max=430
  {% set printerBedYMax = v.printer_bed_y_max %}
  # Number of times the cleaning motions are executed before they are considered complete
  {% set cleaningLoops = v.cleaning_loops %}
  # Disable (0) / Enable (1) PurgeShake movement before cleaning to remove filament strings
  {% set purgeShake = v.purge_shake %}
  # Disable (0) / Enable (1) cleaning motions at the end after heating extruder (only if target temperature is higher)
  {% set finalCleaning = v.final_cleaning %}
  # Disable (0) / Enable (1) verbose macro response messages - useful for debugging
  {% set debug = v.debug %}
  # ------------------------------------------------------------------------
  # DEFAULT VALUES FOR BAMBULAB A1 WIPER AND ELEGOO WIPER HOLDER (https://www.printables.com/model/1196153-neptune-4-corner-alignment-guides) - CHANGE CAREFULLY
  # ------------------------------------------------------------------------
  # Set wiper width
  {% set wiperWidth = v.wiper_width %}
    # Set wiper length
  {% set wiperLength = v.wiper_length %}
  # Thickness of the wiper holder wall (distance of the silicone part from the bed)
  {% set wiperWalloffset = v.wiper_walloffset %}
  # Bed corner to wiper offset (distance from X=0 to the silicone part for N4+ / N4M)
  {% set bedCornerToWiperOffset = v.bed_corner_to_wiper_offset %}
  # Increasing the number of waves results in a higher sinusoidal frequency
  {% set waves = v.waves %}
  # Speed (in mm/s) used for travel moves
  {% set travelSpeed = v.travel_speed %}
  # Speed (in mm/s) used for slow and fast cleaning moves
  {% set slowSpeed = v.slow_speed %}
  {% set fastSpeed = v.fast_speed %}
  # Filament cleaning temperatures
  #{% set cleaningTemperatures = v.cleaning_temperatures %}
  {% set cleaningTemperatures = v.cleaning_temperatures %}

  {% if debug == 1 %}
    RESPOND MSG="INFO:Variables loaded :"
    RESPOND MSG=" - cleaningHeight : { v.cleaning_height }"
    RESPOND MSG=" - wipingAxis : { v.wiping_axis }"
    RESPOND MSG=" - printerBedYMax : { v.printer_bed_y_max }"
    RESPOND MSG=" - cleaningLoops : { v.cleaning_loops }"
    RESPOND MSG=" - purgeShake : { v.purge_shake }"
    RESPOND MSG=" - finalCleaning : { v.final_cleaning }"
    RESPOND MSG=" - debug : { v.debug }"
    RESPOND MSG=" - wiperWidth : { v.wiper_width }"
    RESPOND MSG=" - wiperLength : { v.wiper_length }"
    RESPOND MSG=" - wiperWalloffset : { v.wiper_walloffset }"
    RESPOND MSG=" - bedCornerToWiperOffset : { v.bed_corner_to_wiper_offset }"
    RESPOND MSG=" - waves : { v.waves }"
    RESPOND MSG=" - travelSpeed : { v.travel_speed }"
    RESPOND MSG=" - slowSpeed : { v.slow_speed }"
    RESPOND MSG=" - fastSpeed : { v.fast_speed }"
    RESPOND MSG=" - cleaningTemperatures : { v.cleaning_temperatures }"
  {% endif %}    

  # INITIALIZE AND CHECK VARIABLES

  {% set filamentType = params.FILAMENT_TYPE|default("PLA")|string|upper %} # Set filamentType to the provided variable (fallback to PLA)
  {% set error = 0 %} # Initialize error variable
  
  {% if wipingAxis not in ["x", "X", "y", "Y"] %} # Check for a valid wipingAxis
    RESPOND MSG="ERROR: Wiping axis configuration error. Please check your wipingAxis setting!"
    {% set error = 1 %}
  {% endif %}

  {% if wipingAxis in ["x", "X"] %} # Check clearances for cleaning with bed movements
    {% if ((printer.toolhead.axis_maximum.y - printerBedYMax) < 3.2) %}
      RESPOND MSG="ERROR: Insufficient vertical clearance between printerBedYMax ({printerBedYMax}) and nozzle max Y ({printer.toolhead.axis_maximum.y}). Minimum required: 3.2mm."
      {% set error = 1 %}
    {% endif %}
    {% if ((printerBedYMax < 1) or ((printerBedYMax > 1000))) %}
      RESPOND MSG="ERROR: Printer bed Y-axis size ({printerBedYMax}) out of expected range. Please verify configuration."
      {% set error = 1 %}
    {% endif %}
  {% elif ((printer.configfile.config.stepper_x.position_endstop|float + 3.2) > 0) %} # Check clearances for cleaning with head movements
      RESPOND MSG="ERROR: X homing sensor position ({printer.configfile.config.stepper_x.position_endstop}) is too close to the bed. Required: â‰¤ -3.2mm."
      {% set error = 1 %}
  {% endif %}

  {% if cleaningLoops < 1 %} # Check if cleaningLoops is set to a minimum of 1 loop
    RESPOND MSG="WARNING: cleaningLoops set to false value:{cleaningLoops} - changed to default 1 "
    {% set cleaningLoops = 1 %}
  {% endif %}

  {% if wipingAxis in ["y", "Y"] %} # Cleaning using bed movement
    {% set wiperYmax = printerBedYMax %}
    {% if wiperWidth + wiperWalloffset + printer.configfile.config.stepper_x.position_endstop|float > 0 %}
      {% set wiperXmin = printer.configfile.config.stepper_x.position_endstop|float %}
      {% set wiperWidth = 0 - wiperWalloffset - printer.configfile.config.stepper_x.position_endstop|float %}
    {% else %}
      {% set wiperXmin = 0 - wiperWalloffset - wiperWidth %}
    {% endif %}
  {% else %} # Cleaning using head movement
    {% set wiperXmin = bedCornerToWiperOffset %}
    {% if printer.toolhead.axis_maximum.y - printerBedYMax - wiperWalloffset - wiperWidth < 0 %}
      {% set wiperYmax = printer.toolhead.axis_maximum.y %}
      {% set wiperWidth = printer.toolhead.axis_maximum.y - printerBedYMax - wiperWalloffset %}
    {% else %}
      {% set wiperYmax = printerBedYMax + wiperWalloffset + wiperWidth %}
    {% endif %}
  {% endif %}

  {% set travelFeedrate = travelSpeed * 60 %} # Convert travelSpeed to travelFeedrate
  {% set slowFeedrate = slowSpeed * 60 %} # Convert slowSpeed to slowFeedrate
  {% set fastFeedrate = fastSpeed * 60 %} # Convert fastSpeed to fastFeedrate

  {% if error == 0 %} # Continue only if error is zero
    # HOMING PROCESS
    {% if "x" not in printer.toolhead.homed_axes and "y" not in printer.toolhead.homed_axes and "z" not in printer.toolhead.homed_axes %}
      G28
    {% elif "x" not in printer.toolhead.homed_axes %}
      G28 X
    {% elif "y" not in printer.toolhead.homed_axes %}
      G28 Y
    {% elif "z" not in printer.toolhead.homed_axes %}
      G28 Z
    {% endif %}

    # SAVE Z AXIS POSITION
    {% set zHeight = printer.toolhead.position.z %}
    {% if zHeight == 0 %}
      {% set zHeight = 10 %}
      {% set travelHeight = zHeight %}
    {% else %}
      {% set travelHeight = zHeight + 10 %}
    {% endif %}
  
    # CHECK FOR BLENDED FILAMENTS
    {% if "-" in filamentType %}
      {% set baseFilament = filamentType.split("-")[0] %}
      {% set stringSplitted = 1 %}
    {% else %}
      {% set baseFilament = filamentType %}
      {% set stringSplitted = 0 %}
    {% endif %}
    
    # EVALUATE CLEANING TEMPERATURE
    {% set l = namespace(cleaningTemperature=-1) %}
    RESPOND MSG="EVALUATE CLEANING TEMPERATURE cleaningTemperature : {cleaningTemperature}"
    {% for item in cleaningTemperatures.split(",") %}
      {% set kv = item.strip().split("=") %}
      {% if kv[0]|upper == baseFilament %}
        {% set l.cleaningTemperature = kv[1]|int %}
      {% endif %}
    {% endfor %}
    {% set cleaningTemperature = l.cleaningTemperature %}

    {% if cleaningTemperature == -1 %}
      {% set cleaningTemperature = 140 %}
      RESPOND MSG="WARNING: Unknown filament type {filamentType}. Default cleaning temperature of {cleaningTemperature}c will be used."
    {% else %}
      {% if debug == 1 %}
        {% if stringSplitted == 0 %}
          RESPOND MSG="INFO: Detected filament type {filamentType}. Cleaning temperature set to {cleaningTemperature}c."
        {% else %}
          RESPOND MSG="INFO: Detected filament type {filamentType} (base: {baseFilament}). Cleaning temperature set to {cleaningTemperature}c."
        {% endif %}
      {% endif %}
    {% endif %}

    # SAVE NOZZLE TARGET TEMPERATURE
    {% set actualNozzleTemperature = printer['extruder'].target %}

    # HEAT EXTRUDER
    {% if cleaningTemperature != actualNozzleTemperature %}
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={cleaningTemperature}
      {% if debug == 1 %}
        RESPOND MSG="INFO: Heating extruder to {cleaningTemperature}c for cleaning..."
      {% endif %}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={cleaningTemperature-4} MAXIMUM={cleaningTemperature+10}
    {% endif %}

    # CLEANING SEQUENCE
    {% if debug == 1 %}
      RESPOND MSG="INFO: Initiating nozzle cleaning sequence..."
    {% endif %}    

    # PURGE SHAKE
    {% if purgeShake == 1 %}
      # Travel to PurgeShake position
      G90
      G1 Z{travelHeight} F3000                                      
      {% if wipingAxis in ["y", "Y"] %}
        {% if debug == 1 %}
          RESPOND MSG="INFO: Shaking movement starting at X=0, Y={printerBedYMax-1} (1mm safety margin)."
        {% endif %}
        G1 X0 Y{printerBedYMax-1} F{travelFeedrate}
      {% else %}
        {% if debug == 1 %}
          RESPOND MSG="INFO: Shaking movement starting at X={bedCornerToWiperOffset+wiperLength+1}, Y={printerBedYMax-1} (1mm safety margin)."
        {% endif %}
        G1 X{bedCornerToWiperOffset+wiperLength+1} Y{printerBedYMax-1} F{travelFeedrate}
      {% endif %}
      
      # Quick left/right movements to clear filament strings
      G91
      G1 X20 F{fastFeedrate}
      G1 X-20
      G1 X20
      G1 X-20
      G1 X20
      G1 X-20   
    {% endif %}      

    # Nozzle cleaning
    {% if wipingAxis in ["y", "Y"] %}
      # --- BED MOVEMENT CLEANING SEQUENCE ---
      {% if debug == 1 %}
        RESPOND MSG="INFO: Repeating cleaning motions for {cleaningLoops} times"
        {% if wiperXmin == printer.configfile.config.stepper_x.position_endstop|float %}
            RESPOND MSG="INFO: Starting first cleaning passes near X endstop at X={wiperXmin+0.2}, Y={wiperYmax} (limited X clearance)."
          {% else %}
            RESPOND MSG="INFO: Starting first cleaning passes at X={wiperXmin+(wiperWidth/4)}, Y={wiperYmax}."
          {% endif %}
      {% endif %}

      {% for loops in range(0, cleaningLoops) %}
        G90
        {% if wiperXmin == printer.configfile.config.stepper_x.position_endstop|float %}
          G1 X{wiperXmin+0.2} Y{wiperYmax} F{travelFeedrate}
        {% else %}
          G1 X{wiperXmin+(wiperWidth/4)} Y{wiperYmax} F{travelFeedrate}
        {% endif %}

        # Lower nozzle and start cleaning motion
        G1 Z{cleaningHeight} F1200
        
        # Perform pseudosinusoidal cleaning motion
        G91
        {%set ymov=(wiperLength/(waves*4)) %}
        G1 F{slowFeedrate}
        {% for i in range(0,waves) %}
          G1 X{wiperWidth} Y-{ymov}
          G1 Y-{ymov}
          G1 X-{wiperWidth} Y-{ymov}
          G1 Y-{ymov}
        {% endfor %}
        G1 X{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{wiperWidth} Y{ymov}
          G1 Y{ymov}
          G1 X{wiperWidth} Y{ymov}
          G1 Y{ymov}
        {% endfor %}

        G1 F{fastFeedrate}
        G1 X-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 Y-{ymov}
          G1 X{wiperWidth} Y-{ymov}
          G1 Y-{ymov}
          G1 X-{wiperWidth} Y-{ymov}
        {% endfor %}
        G1 X{wiperWidth}
        {% for i in range(0,waves) %}
          G1 Y{ymov}
          G1 X-{wiperWidth} Y{ymov}
          G1 Y{ymov}
          G1 X{wiperWidth} Y{ymov}
        {% endfor %}

        G1 F{slowFeedrate}
        G1 X-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{wiperWidth} Y-{2*ymov}
          G1 X-{wiperWidth} Y-{2*ymov}
        {% endfor %}
        G1 X{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{wiperWidth} Y{2*ymov}
          G1 X{wiperWidth} Y{2*ymov}
        {% endfor %}
      {% endfor %}

    {% else %}
      # --- HEAD MOVEMENT CLEANING SEQUENCE ---
      {% if debug == 1 %}
        RESPOND MSG="INFO: Repeating cleaning motions for {cleaningLoops} times"
        {% if wiperYmax == printer.toolhead.axis_maximum.y %}
            RESPOND MSG="INFO: Starting first cleaning passes near bed edge at X={wiperXmin+wiperLength}, Y={wiperYmax-0.1} (limited Y clearance)."
          {% else %}
            RESPOND MSG="INFO: Starting first cleaning passes at X={wiperXmin+wiperLength}, Y={wiperYmax-(wiperWidth/4)}."
          {% endif %}
      {% endif %}

      {% for loops in range(0, cleaningLoops) %}
        G90
        {% if wiperYmax == printer.toolhead.axis_maximum.y %}
          G1 X{wiperXmin+wiperLength} Y{wiperYmax-0.1} F{travelFeedrate}
        {% else %}
          G1 X{wiperXmin+wiperLength} Y{wiperYmax-(wiperWidth/4)} F{travelFeedrate}
        {% endif %}
        
        # Lower nozzle and start cleaning motion
        G1 Z{cleaningHeight} F1200 
        
        # Perform pseudosinusoidal cleaning motion
        G91
        {%set xmov=(wiperLength/(waves*4)) %}
        G1 F{slowFeedrate}
        {% for i in range(0,waves) %}
          G1 X-{xmov} Y-{wiperWidth}
          G1 X-{xmov}
          G1 X-{xmov} Y+{wiperWidth}
          G1 X-{xmov}
        {% endfor %}
        G1 Y-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{xmov} Y+{wiperWidth}
          G1 X{xmov}
          G1 X{xmov} Y-{wiperWidth}
          G1 X{xmov}
        {% endfor %}

        G1 F{fastFeedrate}
        G1 Y+{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{xmov}
          G1 X-{xmov} Y-{wiperWidth}
          G1 X-{xmov}
          G1 X-{xmov} Y+{wiperWidth}
        {% endfor %}
        G1 Y-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{xmov}
          G1 X{xmov} Y+{wiperWidth}
          G1 X{xmov}
          G1 X{xmov} Y-{wiperWidth}
        {% endfor %}

        G1 F{slowFeedrate}
        G1 Y+{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{xmov*2} Y-{wiperWidth}
          G1 X-{xmov*2} Y+{wiperWidth}
        {% endfor %}
        G1 Y-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{xmov*2} Y+{wiperWidth}
          G1 X{xmov*2} Y-{wiperWidth}
        {% endfor %}
      {% endfor %}
    {% endif %}

    # Restore saved nozze target temperature
    G1 Z{travelHeight} F3000
    {% if actualNozzleTemperature <= 60 %} # Nozzle is considered cold, use fans at 100% for faster cooldown
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={actualNozzleTemperature}
      M106 S255
      {% if debug == 1 %}
        RESPOND MSG="INFO: Nozzle was cold. Waiting for temperature to rise into 50-60c range..."
      {% endif %}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={50} MAXIMUM={60}
      M106 S0
      {% if debug == 1 %}
        RESPOND MSG="INFO: Nozzle temperature reached target range (50-60c)."
      {% endif %}
    {% elif actualNozzleTemperature > 60 and actualNozzleTemperature < cleaningTemperature %} # Nozzle is preheated, use fans at 50% for faster cooldown
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={actualNozzleTemperature}
      M106 S128
      {% if debug == 1 %}
        RESPOND MSG="INFO: Restoring nozzle temperature to {actualNozzleTemperature}c. Please wait for stabilization..."
      {% endif %}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={actualNozzleTemperature} MAXIMUM={actualNozzleTemperature+10}
      M106 S0
      {% if debug == 1 %}
        RESPOND MSG="INFO: Nozzle temperature stabilized at ~{actualNozzleTemperature}c."
      {% endif %}
    {% elif actualNozzleTemperature >= cleaningTemperature %} # Nozzle is hot, use no fans for faster heating
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={actualNozzleTemperature}
      {% if debug == 1 %}
        RESPOND MSG="INFO: Restoring nozzle temperature to {actualNozzleTemperature}c. Please wait for stabilization..."
      {% endif %}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={actualNozzleTemperature} MAXIMUM={actualNozzleTemperature+10}
      {% if debug == 1 %}
        RESPOND MSG="INFO: Nozzle temperature stabilized at ~{actualNozzleTemperature}c."
      {% endif %}

      {% if finalCleaning == 1 %}
        {% if debug == 1 %}
          RESPOND MSG="INFO: Starting final cleaning pass at ~{actualNozzleTemperature}c."
        {% endif %}

        {% if wipingAxis in ["y", "Y"] %}
          # --- BED MOVEMENT CLEANING SEQUENCE ---
          {% if debug == 1 %}
            {% if wiperXmin == printer.configfile.config.stepper_x.position_endstop|float %}
                RESPOND MSG="INFO: Starting final cleaning pass near X endstop at X={wiperXmin+0.2}, Y={wiperYmax} (limited X clearance)."
              {% else %}
                RESPOND MSG="INFO: Starting final cleaning pass at X={wiperXmin+(wiperWidth/4)}, Y={wiperYmax}."
              {% endif %}
          {% endif %}

          G90
          {% if wiperXmin == printer.configfile.config.stepper_x.position_endstop|float %}
            G1 X{wiperXmin+0.2} Y{wiperYmax} F{travelFeedrate}
          {% else %}
            G1 X{wiperXmin+(wiperWidth/4)} Y{wiperYmax} F{travelFeedrate}
          {% endif %}
  
          # Lower nozzle and start cleaning motion
          G1 Z{cleaningHeight} F1200
          
          # Perform pseudosinusoidal cleaning motion
          G91
          {%set ymov=(wiperLength/(waves*4)) %}
          G1 F{fastFeedrate}
          G1 X{wiperWidth} Y-{ymov}
          G1 Y-{ymov}
          G1 X-{wiperWidth} Y-{ymov}
          G1 Y-{ymov}
        {% else %}
          # --- HEAD MOVEMENT CLEANING SEQUENCE ---
          {% if debug == 1 %}
            {% if wiperYmax == printer.toolhead.axis_maximum.y %}
              RESPOND MSG="INFO: Starting final cleaning pass near bed edge at X={wiperXmin+wiperLength}, Y={wiperYmax-0.1} (limited Y clearance)."
            {% else %}
              RESPOND MSG="INFO: Starting final cleaning pass at X={wiperXmin+wiperLength}, Y={wiperYmax-(wiperWidth/4)}."
            {% endif %}
          {% endif %}
    
          G90
          {% if wiperYmax == printer.toolhead.axis_maximum.y %}
            G1 X{wiperXmin+wiperLength} Y{wiperYmax-0.1} F{travelFeedrate}
          {% else %}
            G1 X{wiperXmin+wiperLength} Y{wiperYmax-(wiperWidth/4)} F{travelFeedrate}
          {% endif %}
          
          # Lower nozzle and start cleaning motion
          G1 Z{cleaningHeight} F1200 
          
          # Perform pseudosinusoidal cleaning motion
          G91
          {%set xmov=(wiperLength/(waves*4)) %}
          G1 F{fastFeedrate}
          G1 X-{xmov} Y-{wiperWidth}
          G1 X-{xmov}
          G1 X-{xmov} Y+{wiperWidth}
          G1 X-{xmov}
        {% endif %}
      {% endif %}        
    {% endif %}

    # Return to center of the bed
    {% if debug == 1 %}
      RESPOND MSG="INFO: Nozzle cleaning sequence complete. Returning nozzle to bed center."
    {% endif %}
    G90
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F{travelFeedrate}
  {% endif %}