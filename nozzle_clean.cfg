#############################################################################
#   NOZZLE CLEAN
#############################################################################
; Version: 0.9.6
[gcode_macro CLEAN_NOZZLE]
description: Nozzle cleaning using a brush
gcode:
  # ------------------------------------------------------------------------
  # CONFIGURATION - CHANGE VALUES!
  # ------------------------------------------------------------------------
  {% set cleaningHeight = 30 %}                               ; Set nozzle height for cleaning at the brush  
  {% set wipingAxis = "Y" %}                                  ; Specifies the axis that will move during wiping (X/Y)
  {% set printerBedYMax = 229 %}                              ; Set maximum Y value of the bed plate edge (not the nozzle maximum if it can go further). N4=229, N4Plus=330, N4Max=430
  {% set cleaningLoops = 1 %}                                 ; Number of times the cleaning motions are executed before they are considered complete
  # ------------------------------------------------------------------------
  # DEFAULT VALUES FOR BAMBULAB A1 WIPER AND ELEGOO WIPER HOLDER (https://www.printables.com/model/1196153-neptune-4-corner-alignment-guides) - CHANGE CAREFULLY
  # ------------------------------------------------------------------------
  {% set wiperWidth = 8 %}                                    ; Set wiper width
  {% set wiperLength = 37 %}                                  ; Set wiper length
  {% set wiperWalloffset = 0 %}                               ; Thickness of the wiper holder wall (distance of the silicone part from the bed)
  {% set bedCornerToWiperOffset = 40.5 %}                     ; Bed corner to wiper offset (distance from X=0 to the silicone part for N4+ / N4M)
  {% set waves = 2 %}                                         ; Increasing the number of waves results in a higher sinusoidal frequency
  {% set travelSpeed = 350 %}                                 ; Speed used for travel moves
  {% set slowSpeed, fastSpeed = (250, 500) %}                 ; Speed used for slow and fast cleaning moves
  {% set cleaningTemperatures = {                             ; Filament cleaning temperatures
    "PLA": 140,
    "PETG": 160,
    "TPU": 180,
    "ABS": 190,
    "ASA": 190 } %}
  # ------------------------------------------------------------------------
  # !!! DO NOT EDIT BELOW !!! - Changes below are unsupported
  # ------------------------------------------------------------------------
  # INITIALIZE AND CHECK VARIABLES
  {% set filamentType = params.FILAMENT_TYPE|default("PLA")|string|upper %} ; Set filamentType to the provided variable (fallback to PLA)
  {% set error = 0 %} ; Initialize error variable
  
  {% if wipingAxis not in ["x", "X", "y", "Y"] %} ; Check for a valid wipingAxis
    RESPOND MSG="‚ö†Ô∏è ERROR: Wiping axis configuration error. Please check your wipingAxis setting!"
    {% set error = 1 %}
  {% endif %}

  {% if wipingAxis in ["x", "X"] %} ; Check clearances for cleaning with bed movements
    {% if ((printer.toolhead.axis_maximum.y - printerBedYMax) < 3.2) %}
      RESPOND MSG="‚ö†Ô∏è ERROR: Insufficient vertical clearance between printerBedYMax ({printerBedYMax}) and nozzle max Y ({printer.toolhead.axis_maximum.y}). Minimum required: 3.2mm."
      {% set error = 1 %}
    {% endif %}
    {% if ((printerBedYMax < 1) or ((printerBedYMax > 1000))) %}
      RESPOND MSG="‚ö†Ô∏è ERROR: Printer bed Y-axis size ({printerBedYMax}) out of expected range. Please verify configuration."
      {% set error = 1 %}
    {% endif %}
  {% elif ((printer.configfile.config.stepper_x.position_endstop|float + 3.2) > 0) %} ; Check clearances for cleaning with head movements
      RESPOND MSG="‚ö†Ô∏è ERROR: X homing sensor position ({printer.configfile.config.stepper_x.position_endstop}) is too close to the bed. Required: ‚â§ -3.2mm."
      {% set error = 1 %}
  {% endif %}

  {% if cleaningLoops < 1 %} ; Check if cleaningLoops is set to a minimum of 1 loop
    RESPOND MSG="‚ö†Ô∏è WARNING: cleaningLoops set to false value:{cleaningLoops} - changed to default 1 "
    {% set cleaningLoops = 1 %}
  {% endif %}

  {% if wipingAxis in ["y", "Y"] %} ; Cleaning using bed movement
    {% set wiperYmax = printerBedYMax %}
    {% if wiperWidth + wiperWalloffset + printer.configfile.config.stepper_x.position_endstop|float > 0 %}
      {% set wiperXmin = printer.configfile.config.stepper_x.position_endstop|float %}
      {% set wiperWidth = 0 - wiperWalloffset - printer.configfile.config.stepper_x.position_endstop|float %}
    {% else %}
      {% set wiperXmin = 0 - wiperWalloffset - wiperWidth %}
    {% endif %}
  {% else %} ; Cleaning using head movement
    {% set wiperXmin = bedCornerToWiperOffset %}
    {% if printer.toolhead.axis_maximum.y - printerBedYMax - wiperWalloffset - wiperWidth < 0 %}
      {% set wiperYmax = printer.toolhead.axis_maximum.y %}
      {% set wiperWidth = printer.toolhead.axis_maximum.y - printerBedYMax - wiperWalloffset %}
    {% else %}
      {% set wiperYmax = printerBedYMax + wiperWalloffset + wiperWidth %}
    {% endif %}
  {% endif %}

  {% set travelFeedrate = travelSpeed * 60 %} ; Convert travelSpeed to travelFeedrate
  {% set slowFeedrate = slowSpeed * 60 %} ; Convert slowSpeed to slowFeedrate
  {% set fastFeedrate = fastSpeed * 60 %} ; Convert fastSpeed to fastFeedrate

  {% if error == 0 %} ; Continue only if error is zero
    # HOMING PROCESS
    {% if "x" not in printer.toolhead.homed_axes and "y" not in printer.toolhead.homed_axes and "z" not in printer.toolhead.homed_axes %}
      G28
    {% elif "x" not in printer.toolhead.homed_axes %}
      G28 X
    {% elif "y" not in printer.toolhead.homed_axes %}
      G28 Y
    {% elif "z" not in printer.toolhead.homed_axes %}
      G28 Z
    {% endif %}

    # SAVE Z AXIS POSITION
    {% set zHeight = printer.toolhead.position.z %}
    {% if zHeight == 0 %}
      {% set zHeight = 10 %}
      {% set travelHeight = zHeight %}
    {% else %}
      {% set travelHeight = zHeight + 10 %}
    {% endif %}
  
    # CHECK FOR BLENDED FILAMENTS
    {% if "-" in filamentType %}
      {% set baseFilament = filamentType.split("-")[0] %}
      {% set stringSplitted = 1 %}
    {% else %}
      {% set baseFilament = filamentType %}
      {% set stringSplitted = 0 %}
    {% endif %}
    
    # SAVE NOZZLE TARGET TEMPERATURE
    {% set actualNozzleTemperature = printer['extruder'].target %}
    {% if actualNozzleTemperature|float > 50 %}
      {% set coldNozzle = 0 %}
    {% else %}
      {% set coldNozzle = 1 %}
    {% endif %}

    # EVALUATE CLEANING TEMPERATURE
    {% if baseFilament in cleaningTemperatures %}
      {% set cleaningTemperature = cleaningTemperatures[baseFilament] %}
      {% if stringSplitted == 0 %}
        RESPOND MSG="‚ÑπÔ∏è Detected filament type {filamentType}. Cleaning temperature set to {cleaningTemperature}¬∞C."
      {% else %}
        RESPOND MSG="‚ÑπÔ∏è Detected filament type {filamentType} (base: {baseFilament}). Cleaning temperature set to {cleaningTemperature}¬∞C."
      {% endif %}
    {% else %}
      {% set cleaningTemperature = 140 %}
      RESPOND MSG="‚ö†Ô∏è Unknown filament type {filamentType}. Default cleaning temperature of {cleaningTemperature}¬∞C will be used."
    {% endif %}

    # HEAT EXTRUDER
    {% if cleaningTemperature != actualNozzleTemperature %}
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={cleaningTemperature}
      RESPOND MSG="üî• Heating extruder to {cleaningTemperature}¬∞C for cleaning..."
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={cleaningTemperature-4} MAXIMUM={cleaningTemperature+10}
    {% endif %}

    # CLEANING SEQUENCE
    RESPOND MSG="üßπ Initiating nozzle cleaning sequence..."
    
    ; Travel to PurgeShake position
    G90
    G1 Z{travelHeight} F3000                                      
    {% if wipingAxis in ["y", "Y"] %}
      RESPOND MSG="‚ÑπÔ∏è Shaking movement starting at X=0, Y={printerBedYMax-1} (1mm safety margin)."
      G1 X0 Y{printerBedYMax-1} F{travelFeedrate}
    {% else %}
      RESPOND MSG="‚ÑπÔ∏è Shaking movement starting at X={bedCornerToWiperOffset+wiperLength+1}, Y={printerBedYMax-1} (1mm safety margin)."
      G1 X{bedCornerToWiperOffset+wiperLength+1} Y{printerBedYMax-1} F{travelFeedrate}
    {% endif %}
    
    ; PurgeShake ‚Äì Quick left/right movements to clear filament strings
    G91
    G1 X20 F{fastFeedrate}
    G1 X-20
    G1 X20
    G1 X-20
    G1 X20
    G1 X-20         

    ; Nozzle cleaning
    {% if wipingAxis in ["y", "Y"] %}
      ; --- BED MOVEMENT CLEANING SEQUENCE ---
      RESPOND MSG="‚ÑπÔ∏è Repeating cleaning motions for {cleaningLoops} times"
      {% if wiperXmin == printer.configfile.config.stepper_x.position_endstop|float %}
          RESPOND MSG="‚ÑπÔ∏è Starting first cleaning passes near X endstop at X={wiperXmin+0.2}, Y={wiperYmax} (limited X clearance)."
        {% else %}
          RESPOND MSG="‚ÑπÔ∏è Starting first cleaning passes at X={wiperXmin+(wiperWidth/4)}, Y={wiperYmax}."
        {% endif %}

      {% for loops in range(0, cleaningLoops) %}
        G90
        {% if wiperXmin == printer.configfile.config.stepper_x.position_endstop|float %}
          G1 X{wiperXmin+0.2} Y{wiperYmax} F{travelFeedrate}
        {% else %}
          G1 X{wiperXmin+(wiperWidth/4)} Y{wiperYmax} F{travelFeedrate}
        {% endif %}

        ; Lower nozzle and start cleaning motion
        G1 Z{cleaningHeight} F1200 
        
        ; Perform pseudosinusoidal cleaning motion
        G91
        {%set ymov=(wiperLength/(waves*4)) %}
        G1 F{slowFeedrate}
        {% for i in range(0,waves) %}
          G1 X{wiperWidth} Y-{ymov} 
          G1 Y-{ymov} 
          G1 X-{wiperWidth} Y-{ymov} 
          G1 Y-{ymov} 
        {% endfor %}
        G1 X{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{wiperWidth} Y{ymov} 
          G1 Y{ymov} 
          G1 X{wiperWidth} Y{ymov} 
          G1 Y{ymov} 
        {% endfor %}

        G1 F{fastFeedrate}
        G1 X-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 Y-{ymov} 
          G1 X{wiperWidth} Y-{ymov} 
          G1 Y-{ymov} 
          G1 X{wiperWidth} Y-{ymov} 
        {% endfor %}
        G1 X{wiperWidth}
        {% for i in range(0,waves) %}
          G1 Y{ymov} 
          G1 X-{wiperWidth} Y{ymov} 
          G1 Y{ymov} 
          G1 X-{wiperWidth} Y{ymov} 
        {% endfor %}

        G1 F{slowFeedrate}
        G1 X-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{wiperWidth} Y-{2*ymov} 
          G1 X-{wiperWidth} Y-{2*ymov} 
        {% endfor %}
        G1 X{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{wiperWidth} Y{2*ymov} 
          G1 X-{wiperWidth} Y{2*ymov} 
        {% endfor %}
      {% endfor %}

    {% else %}
      ; --- HEAD MOVEMENT CLEANING SEQUENCE ---
      RESPOND MSG="‚ÑπÔ∏è Repeating cleaning motions for {cleaningLoops} times"
      {% if wiperYmax == printer.toolhead.axis_maximum.y %}
          RESPOND MSG="‚ÑπÔ∏è Starting first cleaning passes near bed edge at X={wiperXmin+wiperLength}, Y={wiperYmax-0.1} (limited Y clearance)."
        {% else %}
          RESPOND MSG="‚ÑπÔ∏è Starting first cleaning passes at X={wiperXmin+wiperLength}, Y={wiperYmax-(wiperWidth/4)}."
        {% endif %}

      {% for loops in range(0, cleaningLoops) %}
        G90
        {% if wiperYmax == printer.toolhead.axis_maximum.y %}
          G1 X{wiperXmin+wiperLength} Y{wiperYmax-0.1} F{travelFeedrate}
        {% else %}
          G1 X{wiperXmin+wiperLength} Y{wiperYmax-(wiperWidth/4)} F{travelFeedrate}
        {% endif %}
        
        ; Lower nozzle and start cleaning motion
        G1 Z{cleaningHeight} F1200 
        
        ; Perform pseudosinusoidal cleaning motion
        G91
        {%set xmov=(wiperLength/(waves*4)) %}
        G1 F{slowFeedrate}
        {% for i in range(0,waves) %}
          G1 X-{xmov} Y-{wiperWidth} 
          G1 X-{xmov} 
          G1 X-{xmov} Y+{wiperWidth} 
          G1 X-{xmov} 
        {% endfor %}
        G1 Y-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{xmov} Y+{wiperWidth} 
          G1 X{xmov} 
          G1 X{xmov} Y-{wiperWidth} 
          G1 X{xmov} 
        {% endfor %}

        G1 F{fastFeedrate}
        G1 Y+{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{xmov} 
          G1 X-{xmov} Y-{wiperWidth} 
          G1 X-{xmov} 
          G1 X-{xmov} Y+{wiperWidth} 
        {% endfor %}
        G1 Y-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{xmov} 
          G1 X{xmov} Y+{wiperWidth} 
          G1 X{xmov} 
          G1 X{xmov} Y-{wiperWidth} 
        {% endfor %}

        G1 F{slowFeedrate}
        G1 Y+{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X-{xmov*2} Y-{wiperWidth} 
          G1 X-{xmov*2} Y+{wiperWidth} 
        {% endfor %}
        G1 Y-{wiperWidth}
        {% for i in range(0,waves) %}
          G1 X{xmov*2} Y+{wiperWidth} 
          G1 X{xmov*2} Y-{wiperWidth} 
        {% endfor %}
      {% endfor %}

      ; Return to center of the bed
      RESPOND MSG="‚ÑπÔ∏è Nozzle cleaning sequence complete. Returning nozzle to bed center."
      G90
      G1 Z{travelHeight} F3000
      G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F{travelFeedrate}

      ; Restore saved nozzle temperature
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={actualNozzleTemperature}
      
      {% if coldNozzle == 0 %}
        RESPOND MSG="‚ÑπÔ∏è Restoring nozzle temperature to {actualNozzleTemperature}¬∞C. Please wait for stabilization..."
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={actualNozzleTemperature} MAXIMUM={actualNozzleTemperature+10}
        RESPOND MSG="‚úÖ Nozzle temperature stabilized at ~{actualNozzleTemperature}¬∞C. Cleaning completed."
      {% else %}
        RESPOND MSG="‚ÑπÔ∏è Nozzle was cold. Waiting for temperature to rise into 50-60¬∞C range..."
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={50} MAXIMUM={60}
        RESPOND MSG="‚úÖ Nozzle temperature reached target range (50-60¬∞C). Cleaning completed."
      {% endif %}
    {% endif %}

    ; Return to center of the bed
    RESPOND MSG="‚ÑπÔ∏è Nozzle cleaning sequence complete. Returning nozzle to bed center."
    G90
    G1 Z{travelHeight} F3000
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F{travelFeedrate}

    ; Restore saved nozzle temperature
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={actualNozzleTemperature}
      
    {% if coldNozzle == 0 %}
        RESPOND MSG="‚ÑπÔ∏è Restoring nozzle temperature to {actualNozzleTemperature}¬∞C. Please wait for stabilization..."
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={actualNozzleTemperature} MAXIMUM={actualNozzleTemperature+10}
        RESPOND MSG="‚úÖ Nozzle temperature stabilized at ~{actualNozzleTemperature}¬∞C. Cleaning completed."
    {% else %}
        RESPOND MSG="‚ÑπÔ∏è Nozzle was cold. Waiting for temperature to rise into 50-60¬∞C range..."
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={50} MAXIMUM={60}
        RESPOND MSG="‚úÖ Nozzle temperature is now within the target range (50-60¬∞C). Cleaning completed."
    {% endif %}
  {% endif %}